---
- name: debian
  include_tasks: debian.yml
  when: ansible_os_family | lower == "debian"

- name: redhat8
  include_tasks: redhat.yml
  when: 
    - ansible_os_family | lower == "redhat"
    - ansible_distribution_major_version == '8'

- name: redhat7
  include_tasks: redhat7.yml
  when: 
    - ansible_os_family | lower == "redhat"
    - ansible_distribution_major_version == '7'

# Update / upgrade
- name: Crowdsec cscli hub update
  command:
    cmd: cscli hub update
  changed_when: false

- name: Crowdsec cscli hub upgrade
  command:
    cmd: cscli hub upgrade 
  register: hub_upgrade_result
  changed_when: false
  # Todo make better check
  # changed_when: 
  #   - "'All collections are already up-to-date' not in hub_upgrade_result.stderr_lines|join('\n')" 
  #   - "'All parsers are already up-to-date' not in hub_upgrade_result.stderr_lines|join('\n')" 
  #   - "'All scenarios are already up-to-date' not in hub_upgrade_result.stderr_lines|join('\n')" 
  #   - "'All postoverflows are already up-to-date' not in hub_upgrade_result.stderr_lines|join('\n')" 
  # notify: Restart crowdsec
    
# collections
- name: Crowdsec install collections
  command:
    cmd: "cscli collections install {{ item }}"
  with_items: "{{ crowdsec_collections_list }}"
  register: collections_install_result
  changed_when: "'overwrite' not in collections_install_result.stderr"
  when: crowdsec_collections_list  | length > 0
  notify: Restart crowdsec

- name: Crowdsec remove collections
  command:
    cmd: "cscli collections remove {{ item }}"
  with_items: "{{ crowdsec_collections_remove_list }}"
  register: collections_remove_result
  changed_when: "'sudo systemctl reload crowdsec' in collections_remove_result.stderr"
  when: crowdsec_collections_remove_list  | length > 0
  notify: Restart crowdsec

# scenarios
- name: Crowdsec install scenarios
  command:
    cmd: "cscli scenarios install {{ item }}"
  with_items: "{{ crowdsec_scenarios_list }}"
  register: scenarios_install_result
  changed_when: "'overwrite' not in scenarios_install_result.stderr"
  when: crowdsec_scenarios_list  | length > 0
  notify: Restart crowdsec

- name: Crowdsec remove scenarios
  command:
    cmd: "cscli scenarios remove {{ item }}"
  with_items: "{{ crowdsec_scenarios_remove_list }}"
  register: scenarios_remove_result
  changed_when: "'sudo systemctl reload crowdsec' in scenarios_remove_result.stderr"
  when: crowdsec_scenarios_remove_list  | length > 0
  notify: Restart crowdsec

# parsers
- name: Crowdsec install parsers
  command:
    cmd: "cscli parsers install {{ item }}"
  with_items: "{{ crowdsec_parsers_list }}"
  register: parsers_install_result
  changed_when: "'overwrite' not in parsers_install_result.stderr"
  when: crowdsec_parsers_list  | length > 0
  notify: Restart crowdsec

- name: Crowdsec remove parsers
  command:
    cmd: "cscli parsers remove {{ item }}"
  with_items: "{{ crowdsec_parsers_remove_list }}"
  register: parsers_remove_result
  changed_when: "'sudo systemctl reload crowdsec' in parsers_remove_result.stderr"
  when: crowdsec_parsers_remove_list  | length > 0
  notify: Restart crowdsec

# postoverflows
- name: Crowdsec install postoverflows
  command:
    cmd: "cscli postoverflows install {{ item }}"
  with_items: "{{ crowdsec_postoverflows_list }}"
  register: postoverflows_install_result
  changed_when: "'overwrite' not in postoverflows_install_result.stderr"
  when: crowdsec_postoverflows_list  | length > 0
  notify: Restart crowdsec

- name: Crowdsec remove postoverflows
  command:
    cmd: "cscli postoverflows remove {{ item }}"
  with_items: "{{ crowdsec_postoverflows_remove_list }}"
  register: postoverflows_remove_result
  changed_when: "'sudo systemctl reload crowdsec' in postoverflows_remove_result.stderr"
  when: crowdsec_postoverflows_remove_list  | length > 0
  notify: Restart crowdsec

### Config files
- name: Crowdsec enable/disable the Prometheus endpoint
  replace:
    path: "/etc/crowdsec/config.yaml"
    after: "prometheus:"
    regexp: 'enabled:.*$'
    replace: "{{ crowdsec_prometheus_endpoint }}"
    backup: yes
  notify: Restart crowdsec

- name: Crowdsec ajust ban time
  replace:
    path: "/etc/crowdsec/profiles.yaml"
    after: "- type: ban"
    regexp: 'duration: [0-9].*$'
    replace: "{{ crowdsec_ban_duration }}"
    backup: yes
  notify: Restart crowdsec

- name: Crowdsec add custom configuration to acquis.yaml
  ansible.builtin.blockinfile:
    path: /etc/crowdsec/acquis.yaml
    block: "{{ crowdsec_acquis_addon }}"
    backup: yes
  notify: Restart crowdsec
  when: crowdsec_acquis_addon is defined

- name: Crowdsec cscli bash completion
  ansible.builtin.shell: "cscli completion bash | tee /etc/bash_completion.d/cscli"
  register: bash_completion_result
  changed_when: "'# bash completion for' not in bash_completion_result.stdout"
  failed_when: "'Error' in bash_completion_result.stderr"
  
- name: Crowdsec start and enable Crowdsec services
  service:
    name: "{{ item }}"
    state: started
    enabled: true
  with_items: "{{ crowdsec_services_start }}"
